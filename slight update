def process_line(line):
  # This is where you can add your own processing logic

  hex_string = line.split(" ")[0]
  return extract_from_hex(hex_string)
  
def hex_to_gcode(hex_string):
    # Split the hex string into a list of two-character hex values
    hex_values = [hex_string[i:i+2] for i in range(0, len(hex_string), 2)]

    # Convert each hex value to its corresponding ASCII character
    gcode_string = ''.join(chr(int(hv, 16)) for hv in hex_values)

    return gcode_string

def extract_from_hex(hex_string):
    # Find the index of "4e" in the hex string
    start_index = hex_string.find("4e")
    

    # If "4e" is not found, return an empty string
    if start_index == -1:
      start_index = hex_string.find("4d")
      if start_index == -1:
          start_index = hex_string.find("47")
          if start_index == -1:
            start_index = hex_string.find("30")
            if start_index == -1:
              start_index =  hex_string.find("31")

    # Extract the substring starting from "4e"
    hex_substring = hex_string[start_index:]

    # Convert the hex substring to ASCII
    ascii_string = hex_to_gcode(hex_substring)

    return ascii_string

# Test the function with your example


def read_file(input_filename, output_filename):
    with open(input_filename, 'r') as infile, open(output_filename, 'w') as outfile:
        for line in infile:
            result = process_line(line.strip())
            outfile.write(result + '\n')

read_file('testrun.txt', 'output.txt')
